// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: role/role.proto

package role

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Role service

func NewRoleEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Role service

type RoleService interface {
	// 添加指定权限到权限列表
	Add(ctx context.Context, in *RoleModel, opts ...client.CallOption) (*common.Response, error)
	// 根据roleId删除权限
	Delete(ctx context.Context, in *RoleDeleteReq, opts ...client.CallOption) (*common.Response, error)
	// 更新指定权限
	Update(ctx context.Context, in *RoleModel, opts ...client.CallOption) (*common.Response, error)
	// 获取基础权限列表
	GetList(ctx context.Context, in *Page, opts ...client.CallOption) (Role_GetListService, error)
	// 获取指定用户id的用户角色
	GetUserRole(ctx context.Context, in *RoleFindReq, opts ...client.CallOption) (*RoleModel, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) Add(ctx context.Context, in *RoleModel, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Role.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Delete(ctx context.Context, in *RoleDeleteReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Role.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Update(ctx context.Context, in *RoleModel, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Role.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetList(ctx context.Context, in *Page, opts ...client.CallOption) (Role_GetListService, error) {
	req := c.c.NewRequest(c.name, "Role.GetList", &Page{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &roleServiceGetList{stream}, nil
}

type Role_GetListService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*RoleModel, error)
}

type roleServiceGetList struct {
	stream client.Stream
}

func (x *roleServiceGetList) Close() error {
	return x.stream.Close()
}

func (x *roleServiceGetList) Context() context.Context {
	return x.stream.Context()
}

func (x *roleServiceGetList) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleServiceGetList) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleServiceGetList) Recv() (*RoleModel, error) {
	m := new(RoleModel)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roleService) GetUserRole(ctx context.Context, in *RoleFindReq, opts ...client.CallOption) (*RoleModel, error) {
	req := c.c.NewRequest(c.name, "Role.GetUserRole", in)
	out := new(RoleModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Role service

type RoleHandler interface {
	// 添加指定权限到权限列表
	Add(context.Context, *RoleModel, *common.Response) error
	// 根据roleId删除权限
	Delete(context.Context, *RoleDeleteReq, *common.Response) error
	// 更新指定权限
	Update(context.Context, *RoleModel, *common.Response) error
	// 获取基础权限列表
	GetList(context.Context, *Page, Role_GetListStream) error
	// 获取指定用户id的用户角色
	GetUserRole(context.Context, *RoleFindReq, *RoleModel) error
}

func RegisterRoleHandler(s server.Server, hdlr RoleHandler, opts ...server.HandlerOption) error {
	type role interface {
		Add(ctx context.Context, in *RoleModel, out *common.Response) error
		Delete(ctx context.Context, in *RoleDeleteReq, out *common.Response) error
		Update(ctx context.Context, in *RoleModel, out *common.Response) error
		GetList(ctx context.Context, stream server.Stream) error
		GetUserRole(ctx context.Context, in *RoleFindReq, out *RoleModel) error
	}
	type Role struct {
		role
	}
	h := &roleHandler{hdlr}
	return s.Handle(s.NewHandler(&Role{h}, opts...))
}

type roleHandler struct {
	RoleHandler
}

func (h *roleHandler) Add(ctx context.Context, in *RoleModel, out *common.Response) error {
	return h.RoleHandler.Add(ctx, in, out)
}

func (h *roleHandler) Delete(ctx context.Context, in *RoleDeleteReq, out *common.Response) error {
	return h.RoleHandler.Delete(ctx, in, out)
}

func (h *roleHandler) Update(ctx context.Context, in *RoleModel, out *common.Response) error {
	return h.RoleHandler.Update(ctx, in, out)
}

func (h *roleHandler) GetList(ctx context.Context, stream server.Stream) error {
	m := new(Page)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RoleHandler.GetList(ctx, m, &roleGetListStream{stream})
}

type Role_GetListStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*RoleModel) error
}

type roleGetListStream struct {
	stream server.Stream
}

func (x *roleGetListStream) Close() error {
	return x.stream.Close()
}

func (x *roleGetListStream) Context() context.Context {
	return x.stream.Context()
}

func (x *roleGetListStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleGetListStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleGetListStream) Send(m *RoleModel) error {
	return x.stream.Send(m)
}

func (h *roleHandler) GetUserRole(ctx context.Context, in *RoleFindReq, out *RoleModel) error {
	return h.RoleHandler.GetUserRole(ctx, in, out)
}
